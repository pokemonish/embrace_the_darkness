Index: src/main/test/frontend/SignInServletTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/test/frontend/SignInServletTest.java	(revision 0f66daccf1479165c3622b4a5b6deeff5622a77b)
+++ src/main/test/frontend/SignInServletTest.java	(revision )
@@ -34,6 +34,17 @@
     }
 
     @Test
+    public void testInvalidJson() throws IOException, ServletException {
+        String invalidJsonString = "This string is not Json at all!!!111";
+
+        when(mockedReader.readLine()).thenReturn(invalidJsonString).thenReturn(null);
+
+        signInServlet.doPost(mockedRequest, mockedResponse);
+        testDoPostAfter("Request is invalid. Can't parse json.",
+                HttpServletResponse.SC_BAD_REQUEST, 1);
+    }
+
+    @Test
     public void testNoDataDoPost() throws ServletException, IOException {
         testDoPost("login is required", HttpServletResponse.SC_OK, 1);
     }
\ No newline at end of file
Index: src/main/java/frontend/SignInServlet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/frontend/SignInServlet.java	(revision 0f66daccf1479165c3622b4a5b6deeff5622a77b)
+++ src/main/java/frontend/SignInServlet.java	(revision )
@@ -40,7 +40,16 @@
 
         String sessionId = session.getId();
 
-        JsonObject requestData = JsonRequestParser.parse(request);
+        JsonObject requestData;
+
+        try {
+            requestData = JsonRequestParser.parse(request);
+        } catch (IOException e) {
+            jsonResponse.addProperty("Status", "Request is invalid. Can't parse json.");
+            ResponseHandler.respondWithJSONAndStatus(response, jsonResponse,
+                    HttpServletResponse.SC_BAD_REQUEST);
+            return;
+        }
 
         JsonElement requestEmail = requestData.get("email");
         JsonElement requestPassword = requestData.get("password");
Index: src/main/java/frontend/SignUpServlet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/frontend/SignUpServlet.java	(revision 0f66daccf1479165c3622b4a5b6deeff5622a77b)
+++ src/main/java/frontend/SignUpServlet.java	(revision )
@@ -31,16 +31,24 @@
     public void doPost(@NotNull HttpServletRequest request,
                        @NotNull HttpServletResponse response) throws ServletException, IOException {
 
+        JsonObject jsonResponse = new JsonObject();
 
-        JsonObject requestJsonData = JsonRequestParser.parse(request);
+        JsonObject requestJsonData;
 
+        try {
+            requestJsonData = JsonRequestParser.parse(request);
+        } catch (IOException e) {
+            jsonResponse.addProperty("Status", "Request is invalid. Can't parse json.");
+            ResponseHandler.respondWithJSONAndStatus(response, jsonResponse,
+                    HttpServletResponse.SC_BAD_REQUEST);
+            return;
+        }
+
         JsonElement requestEmail = requestJsonData.get("email");
         JsonElement requestPassword = requestJsonData.get("password");
 
         String name = requestEmail == null ? "" : requestEmail.getAsString();
         String password = requestPassword == null ? "" : requestPassword.getAsString();
-
-        JsonObject jsonResponse = new JsonObject();
 
         if (name.isEmpty()) {
             jsonResponse.addProperty("Status", "login is required");
Index: ../cfg/server.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../cfg/server.properties	(revision 0f66daccf1479165c3622b4a5b6deeff5622a77b)
+++ ../cfg/server.properties	(revision )
@@ -5,4 +5,5 @@
 sign_out_url = /api/v1/auth/signout
 admin_url = /admin
 post_name_url = /postName
+gameplay_url = /gameplay
 resource_base = public_html
\ No newline at end of file
Index: src/main/test/frontend/SignUpServletTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/test/frontend/SignUpServletTest.java	(revision 0f66daccf1479165c3622b4a5b6deeff5622a77b)
+++ src/main/test/frontend/SignUpServletTest.java	(revision )
@@ -34,6 +34,17 @@
     }
 
     @Test
+    public void testInvalidJson() throws IOException, ServletException {
+        String invalidJsonString = "This string is not Json at all!!!111";
+
+        when(mockedReader.readLine()).thenReturn(invalidJsonString).thenReturn(null);
+
+        signUpServlet.doPost(mockedRequest, mockedResponse);
+        testDoPostAfter("Request is invalid. Can't parse json.",
+                HttpServletResponse.SC_BAD_REQUEST, 1);
+    }
+
+    @Test
     public void testNoDataDoPost() throws ServletException, IOException {
         testDoPost("login is required", HttpServletResponse.SC_OK, 1);
     }
\ No newline at end of file
Index: ../public_html/js/tmpl/login.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../public_html/js/tmpl/login.js	(revision 0f66daccf1479165c3622b4a5b6deeff5622a77b)
+++ ../public_html/js/tmpl/login.js	(revision )
@@ -1,1 +1,1 @@
-define(function () {return function (__fest_context){"use strict";var __fest_self=this,__fest_buf="",__fest_chunks=[],__fest_chunk,__fest_attrs=[],__fest_select,__fest_if,__fest_iterator,__fest_to,__fest_fn,__fest_html="",__fest_blocks={},__fest_params,__fest_element,__fest_debug_file="",__fest_debug_line="",__fest_debug_block="",__fest_htmlchars=/[&<>"]/g,__fest_htmlchars_test=/[&<>"]/,__fest_short_tags = {"area":true,"base":true,"br":true,"col":true,"command":true,"embed":true,"hr":true,"img":true,"input":true,"keygen":true,"link":true,"meta":true,"param":true,"source":true,"wbr":true},__fest_element_stack = [],__fest_htmlhash={"&":"&amp;","<":"&lt;",">":"&gt;","\"":"&quot;"},__fest_jschars=/[\\'"\/\n\r\t\b\f<>]/g,__fest_jschars_test=/[\\'"\/\n\r\t\b\f<>]/,__fest_jshash={"\"":"\\\"","\\":"\\\\","/":"\\/","\n":"\\n","\r":"\\r","\t":"\\t","\b":"\\b","\f":"\\f","'":"\\'","<":"\\u003C",">":"\\u003E"},___fest_log_error;if(typeof __fest_error === "undefined"){___fest_log_error = (typeof console !== "undefined" && console.error) ? function(){return Function.prototype.apply.call(console.error, console, arguments)} : function(){};}else{___fest_log_error=__fest_error};function __fest_log_error(msg){___fest_log_error(msg+"\nin block \""+__fest_debug_block+"\" at line: "+__fest_debug_line+"\nfile: "+__fest_debug_file)}function __fest_replaceHTML(chr){return __fest_htmlhash[chr]}function __fest_replaceJS(chr){return __fest_jshash[chr]}function __fest_extend(dest, src){for(var i in src)if(src.hasOwnProperty(i))dest[i]=src[i];}function __fest_param(fn){fn.param=true;return fn}function __fest_call(fn, params,cp){if(cp)for(var i in params)if(typeof params[i]=="function"&&params[i].param)params[i]=params[i]();return fn.call(__fest_self,params)}function __fest_escapeJS(s){if (typeof s==="string") {if (__fest_jschars_test.test(s))return s.replace(__fest_jschars,__fest_replaceJS);} else if (typeof s==="undefined")return "";return s;}function __fest_escapeHTML(s){if (typeof s==="string") {if (__fest_htmlchars_test.test(s))return s.replace(__fest_htmlchars,__fest_replaceHTML);} else if (typeof s==="undefined")return "";return s;}var json=__fest_context;__fest_buf+=("<div class=\"title title_center\">Login</div><div class=\"login__input_data\"><form class=\"login__form\"><div class=\"field\"><div class=\"field__in email-field__in\"><input class=\"input\" name=\"email\" type=\"text\" placeholder=\"Email\" required=\"\"/></div><div class=\"field__error email-field__error\"></div></div><div class=\"field\"><div class=\"field__in password-field__in\"><input class=\"input\" name=\"password\" type=\"text\" placeholder=\"Password\" required=\"\"/></div><div class=\"field__error password-field__error\"></div></div><div class=\"field field__btn\"><button class=\"btn login__btn btn-success\" id=\"login\">Login</button></div></form></div><div class=\"field field__btn\"><button class=\"btn btn-primary main__btn\">Menu</button></div>");__fest_to=__fest_chunks.length;if (__fest_to) {__fest_iterator = 0;for (;__fest_iterator<__fest_to;__fest_iterator++) {__fest_chunk=__fest_chunks[__fest_iterator];if (typeof __fest_chunk==="string") {__fest_html+=__fest_chunk;} else {__fest_fn=__fest_blocks[__fest_chunk.name];if (__fest_fn) __fest_html+=__fest_call(__fest_fn,__fest_chunk.params,__fest_chunk.cp);}}return __fest_html+__fest_buf;} else {return __fest_buf;}} ; });
\ No newline at end of file
+define(function () {return function (__fest_context){"use strict";var __fest_self=this,__fest_buf="",__fest_chunks=[],__fest_chunk,__fest_attrs=[],__fest_select,__fest_if,__fest_iterator,__fest_to,__fest_fn,__fest_html="",__fest_blocks={},__fest_params,__fest_element,__fest_debug_file="",__fest_debug_line="",__fest_debug_block="",__fest_htmlchars=/[&<>"]/g,__fest_htmlchars_test=/[&<>"]/,__fest_short_tags = {"area":true,"base":true,"br":true,"col":true,"command":true,"embed":true,"hr":true,"img":true,"input":true,"keygen":true,"link":true,"meta":true,"param":true,"source":true,"wbr":true},__fest_element_stack = [],__fest_htmlhash={"&":"&amp;","<":"&lt;",">":"&gt;","\"":"&quot;"},__fest_jschars=/[\\'"\/\n\r\t\b\f<>]/g,__fest_jschars_test=/[\\'"\/\n\r\t\b\f<>]/,__fest_jshash={"\"":"\\\"","\\":"\\\\","/":"\\/","\n":"\\n","\r":"\\r","\t":"\\t","\b":"\\b","\f":"\\f","'":"\\'","<":"\\u003C",">":"\\u003E"},___fest_log_error;if(typeof __fest_error === "undefined"){___fest_log_error = (typeof console !== "undefined" && console.error) ? function(){return Function.prototype.apply.call(console.error, console, arguments)} : function(){};}else{___fest_log_error=__fest_error};function __fest_log_error(msg){___fest_log_error(msg+"\nin block \""+__fest_debug_block+"\" at line: "+__fest_debug_line+"\nfile: "+__fest_debug_file)}function __fest_replaceHTML(chr){return __fest_htmlhash[chr]}function __fest_replaceJS(chr){return __fest_jshash[chr]}function __fest_extend(dest, src){for(var i in src)if(src.hasOwnProperty(i))dest[i]=src[i];}function __fest_param(fn){fn.param=true;return fn}function __fest_call(fn, params,cp){if(cp)for(var i in params)if(typeof params[i]=="function"&&params[i].param)params[i]=params[i]();return fn.call(__fest_self,params)}function __fest_escapeJS(s){if (typeof s==="string") {if (__fest_jschars_test.test(s))return s.replace(__fest_jschars,__fest_replaceJS);} else if (typeof s==="undefined")return "";return s;}function __fest_escapeHTML(s){if (typeof s==="string") {if (__fest_htmlchars_test.test(s))return s.replace(__fest_htmlchars,__fest_replaceHTML);} else if (typeof s==="undefined")return "";return s;}var json=__fest_context;__fest_buf+=("<div class=\"title title_center\">Login</div><div class=\"login__input_data\"><form class=\"login__form\" id=\"login__form\"><div class=\"field\"><div class=\"field__in email-field__in\"><input class=\"input\" name=\"email\" type=\"email\" placeholder=\"Email\" required=\"\"/></div><div class=\"field__error email-field__error\"></div></div><div class=\"field\"><div class=\"field__in password-field__in\"><input class=\"input\" name=\"password\" type=\"text\" placeholder=\"Password\" required=\"\"/></div><div class=\"field__error password-field__error\"></div></div><div class=\"field field__btn\"><button class=\"btn login__btn btn-success\" id=\"login\">Login</button></div></form></div><div class=\"field field__btn\"><button class=\"btn btn-primary main__btn\">Menu</button></div>");__fest_to=__fest_chunks.length;if (__fest_to) {__fest_iterator = 0;for (;__fest_iterator<__fest_to;__fest_iterator++) {__fest_chunk=__fest_chunks[__fest_iterator];if (typeof __fest_chunk==="string") {__fest_html+=__fest_chunk;} else {__fest_fn=__fest_blocks[__fest_chunk.name];if (__fest_fn) __fest_html+=__fest_call(__fest_fn,__fest_chunk.params,__fest_chunk.cp);}}return __fest_html+__fest_buf;} else {return __fest_buf;}} ; });
\ No newline at end of file
Index: src/main/java/main/ResponseHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/main/ResponseHandler.java	(revision 0f66daccf1479165c3622b4a5b6deeff5622a77b)
+++ src/main/java/main/ResponseHandler.java	(revision )
@@ -16,8 +16,11 @@
     public static void respondWithJSON(@NotNull HttpServletResponse response,
                                        @NotNull JsonObject jsonResponse) throws IOException {
 
-        response.setContentType("application/json;charset=utf-8");
+        respondWithJSONAndStatus(response, jsonResponse, HttpServletResponse.SC_OK);
+    }
 
+    public static void respondWithJSONAndStatus(@NotNull HttpServletResponse response,
+                                         @NotNull JsonObject jsonResponse, int status) throws IOException {
         try (PrintWriter writer = response.getWriter()) {
             if (writer != null) {
                 writer.println(jsonResponse);
@@ -25,8 +28,7 @@
                 response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
             }
         }
-        response.setStatus(HttpServletResponse.SC_OK);
-
+        response.setStatus(status);
     }
 
     public static void drawPage(@NotNull HttpServletResponse response,
